
































    










<!DOCTYPE HTML>
<html>
    <head>
        

<meta name="viewport" content="initial-scale=1.0,maximum-scale=1.0;"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"/>
<meta http-equiv="Expires" content="Wed, 26 Feb 1997 08:21:57 GMT"/>
<meta http-equiv="Pragma" content="no-cache"/>
<title>Secure Cloud Access</title>

<link rel="stylesheet" type="text/css" href="/stylesheets/Default_loginWebOS.css?template=3"/>

<link rel="stylesheet" type="text/css" href="/stylesheets/loginWebOS.css"/>


<script type="text/javascript">
   


</script>    
        <script type="text/javascript" src="/login.js"></script>   
        <script type="text/javascript" src="/js/cache_dojo.js"></script>   
        <script type="text/javascript">
            function launchOpenIDLogin(dest_url) {
                location.href = "/openid/openIDStart.jsp?openid_identifier=" + dest_url;
                return false;
            }
            function launchOpenIDClaim() {
                location.href = "/pageWrapper.jsp?hk=pagewrapper.message.openidclaim&url=/openid/openIDClaim.jsp?";
            }
            
            //all this logic is to work around an android slate bug where input tabbing doesn't work when the inputs are covered by the keyboard
            var doSizeCheck = false;
            if (doSizeCheck) {
                window.onresize = checkSize;
            }
            var zIndexCnt = 400;
            function checkSize() {
                if (document.getElementById("LoginBox").offsetHeight + 100 > document.body.clientHeight ) {
                    document.getElementById("LoginBox").className = "movedUp";
                } else if (document.getElementById("LoginBox").offsetHeight + 100 < document.body.clientHeight ) {
                    document.getElementById("LoginBox").className = "";
                    
                } 
            }
            
          
        </script>
    </head>
    <body class="loginPage">
        


<table id="LoginTable" border="0" cellspacing="0">
    <tr>
        <td class="loginHeader">
            <div class="loginFormLogo"></div>
        </td>
    </tr>
    <tr id="BackgroundDisplayHelper">
        <td class="loginBlockCell"> 
            <div class="loginTitleBlock"><span>Secure Cloud Access</span></div>
                <div class="loginLinksBlock">
                    <div class="blankLoginBox">
                        <h1>Additional Links</h1>
                        
                            
                        



 












        <table class="loginForm-info-table" >
            <tr>
                <td>
                    
                    		
                    <p class="loginInformation-icon resetPasswordIcon"><span class="loginInformation-label">Reset Password:</span><br/>
                    <a href="/apps/selfService/resetPassword.jsp" style="text-decoration: none" target="_blank"><span class="loginInformation-link">Click here if you have forgotten your password</span></a></p>
                    

<p class="loginInformation-icon sysCheckIcon"><span class="loginInformation-label">Activate Your Sycamore Login:</span><br>
                    <a onclick="if (launchSystemCheck) return launchSystemCheck()" target="_blank" style="text-decoration: none" href="/isu/isuPasswordReset.jsp"><span class="loginInformation-link">Click here to activate your account.</span></a></p>

                    

		<p class="loginInformation-icon sysCheckIcon"><span class="loginInformation-label">Need Login Help:</span><br>
                    <a onclick="if (launchSystemCheck) return launchSystemCheck()" target="_blank" style="text-decoration: none" href="http://www.indstate.edu/oit/faculty/passwordpolicy.php"><span class="loginInformation-link">Click here to View the FAQS page.</span></a></p>



		    

		<p class="loginInformation-icon sysCheckIcon"><span class="loginInformation-label">Additional Information:</span><br>
                    <a onclick="if (launchSystemCheck) return launchSystemCheck()" target="_blank" style="text-decoration: none" href="http://indstate.edu/oit/nologin.php"><span class="loginInformation-link">Click here to View Resources which do not require login.</span></a></p>



		    
                    <p class="loginInformation-icon sysCheckIcon"><span class="loginInformation-label">System Check:</span><br/>
                    <a href="/apps/systemCheck/systemCheck.jsp" style="text-decoration: none" target="_blank" onclick="if (launchSystemCheck) return launchSystemCheck()"><span class="loginInformation-link">Click here to run a system check</span></a></p>
                    
                    
                    <auth:isOpenIDEnabled>
                        
                            
                        









         
    </body>
</html>

                    </auth:isOpenIDEnabled>
                </td>
            </tr>
        </table>
        
                    </div>
                </div>
                <div class="loginFormBlock">
                    <div id="LoginBox">
                        <div id="LoadingIndicator"><div id="LoadingIcon"></div></div>
                        <h1>Login</h1>
                         
                            
                        






















        <div id="controlElement" style="visibility:hidden"></div>
         
        <script type="text/javascript" src="/hardware/js/intel/intel.context.js"></script>
        <script type="text/javascript" src="/hardware/js/common.js"></script>
         
        <script type="text/javascript">
            
            
            //Writes USB Applet/ActiveX to controlElement DIV after Dojo (if used) has reloaded page
            function writeControl( id ) {
            
                }

                //Call back from USBApplet after applet is loaded and has completed probing for USB devices
                function displayResults() {
                }

                if( window.dojo ) {
                    writeControl( 'BackgroundDisplayHelper' );
                }
                else {
                    writeControl( 'controlElement' );
                }
                
                var isSCALicense = true;
                
                function checkEnterOnSubmit(event) {
                    var e = event ? event : window.event;
                    if (e == undefined) return;
                    var pK = e.which ? e.which : e.keyCode;
                    if (pK == 13) {
                        setLoading();
                    }
                }

                function setLoading() {
                    if (isSample) return;
                    if (window.dijit) {
                        var dojo1loginBtn = dijit.byId("LoginButton");
                        if (dojo1loginBtn) {
                            dojo1loginBtn.attr("iconClass", "loadingIcon");
                            dojo1loginBtn.attr("disabled", "true");
                        }
                    } else {
                        var loginBtn = document.getElementById("LoginButton");
                        if (loginBtn) {
                            loginBtn.className = "Disabled WebOSButton";
                        }
                    }
                        
                    var loadingIndicator = document.getElementById("LoadingIndicator");
                    if (loadingIndicator) {
                        loadingIndicator.style.display = "block";
                        var loadingIcon = document.getElementById("LoadingIcon");
                        loadingIcon.className = "loading";
                    }
                    prepareFormSubmit();
                }

                // function to determine that we aren't dealing with iOS devices
                function notiOS() {
                    var ua = navigator.userAgent.toLowerCase();
                    return ua.indexOf("ipad") == -1 && ua.indexOf("iphone") == -1 && ua.indexOf("ipod") == -1;
                }

                var doLoadingIcon = true;
                var isSample = false;
                var isLoggingIn = false;
                function prepareFormSubmit() {
                    if (isLoggingIn) return;
                    
                    isLoggingIn = true;
                    /*if (window.console && window.console.debug)console.debug("otpStatus", otpStatus);
                    if (isSCALicense && otpRequired && !shown503) {
                        if (otpStatus == 0) {
                            otpStatus = 3;
                            queryOTP();
                            return false;
                        }
                    }*/

                    window.status='Please wait while we access your account...';
                    var usbControl = document.getElementById( 'USBControl' )
                    var usbSelect = document.getElementById( 'wnHardwareID' );
                    if( usbControl != null && usbSelect != null && notiOS() ) {
                        if ( navigator.userAgent.toLowerCase().indexOf( "msie" ) != -1 && false ) {
                            for( var i=0; i<usbControl.GetDeviceCount(); i++ ) {
                                usbSelect.options[i] = new Option( usbControl.DeviceString( i ), usbControl.DeviceString( i ), true, true );
                            }
                        }
                        else {
                            var keys = eval('(' + usbControl.getKeys() + ')');
                            for( var i=0; i<keys.length; i++ ) {
                                usbSelect.options[i] = new Option( keys[i].serial, keys[i].serial, true, true );
                            }
                        }
                    }
                    setTimeout("document.forms[0].submit();", 50); //added a timeout so the loading icon will start spinning in Chrome
                }
                
                var hardwareProperties = [
                    ["Core","TotalInstalledMemory", "installedMemory"]
                ]
                function getHardwareInfo() {
                    intel.webapi.context.get("Device", successCB, errorCB);
                }
                
                function successCB( infoObject ) {
                    infoObject = getValue(infoObject);
                    buildHardwareString({'TotalInstalledMemory': Math.round(infoObject.totalInstalledMemory / 1024 / 1024)});
                }
                
                function errorCB(arg) {
                    if (window.console && window.console.debug) console.debug("error code", arg.code); //error code will be 2 if scanner is not present
                    //if (otpStatus == 3) { //otp query began after user submitted the form, so submit now that the query has completed, even though it failed
                    //    otpStatus = 2;
                        document.forms[0].submit();
                    //}
                   
                }
                var hardwareJSON = "{";
                var hardwareInfoRetrievedCnt = 0;
                function buildHardwareString(infoObject) {
                    for (var pName in infoObject) {
             
                        if (hardwareJSON.length > 1) {
                            hardwareJSON += ",";
                        }
                        var value = infoObject[pName];
                        hardwareJSON += "'" + getClientHardwareProperty(pName) + "':" + value;
              
                    }
                    hardwareInfoRetrievedCnt++;
                    if (hardwareInfoRetrievedCnt == hardwareProperties.length) {
                        hardwareJSON += "}";
                        document.forms[0].elements['[Client.Hardware]'].value = hardwareJSON;
                    }
                }

                function getClientHardwareProperty(intelProperty) {
                    for (var n = 0; n < hardwareProperties.length; n++) {
                        if (hardwareProperties[n][1] == intelProperty) {
                            return hardwareProperties[n][2];
                        }
                    }
                    return intelProperty;
                }

                if (window.dojo) {
                    dojo.addOnLoad(init);
                } else {
                    window.onload = init;
                }
                

                var otpRequired = true;
                var otpTries = 0;
                var waitingForOTP = false;
                // -3 = not checked if scanner is present
                // -2 = checking if scanner is present
                // -1 = user has submitted the form while check is in progress
                // 0 = scanner status is available, but not queried OTP
                // 1 = queried
                // 2 = recieved query
                // 3 = submitting login form after otpReturns
                var otpStatus = 0; //we are no longer checking for scanner status
                var scannerPresent = false;
     
                var claimOpenID = false;
                function init() {
                    if (isSCALicense) {
                        setTimeout("checkHardwareService();", 500);
                    }
                    if(claimOpenID) { 
                        launchOpenIDClaim();
                    }
                    //otpStatus = -2;
                    //setTimeout("ScannerCheckTimeout();", 5000); //if for whatever reason the scanner check does not notify us, then we we need to assume the device is not present
                }
                
                function serviceExists() {
                    getHardwareInfo();
                }

                var shown503 = false;
                function serivceError(error) {
                    if (error.Code == 401) {
                        otpStatus = 0;
                    }
                    if (shown503) return;
                    shown503 = error.Code == 503;
                    if (window.console && window.console.debug)console.debug('An Error occurred\nError Code:' + error.Code + "\nError Message: " + error.Message);
                }

                function getScannerStatus(infoObject) {
                    if (window.console && window.console.debug)console.debug("getScannerStatus()", infoObject);
                    otpStatus = 0;
                    scannerPresent = infoObject.IsFPScanneravailable == "True";
                    if (scannerPresent) {
                        var display = false ? "block" : "table-row";
                        document.getElementById("OTPRow").style.display = display;
                        document.getElementById("OTPRow2").style.display = display;
                    }
                }

                function ScannerCheckTimeout() {
                    if (otpStatus == -1) { //user has submitted form and the scanner check never returned, probably due to a 500 error
                        otpStatus = 0;
                        scannerPresent = false;
                        document.forms[0].submit();
                        if (window.console && window.console.debug)console.debug("Error: Unable to determine if scanner is present");
                    }
                }

                function queryOTP() {
                    //if (otpStatus != 3)
                    //    otpStatus = 1;
                    //intel.webapi.context.OTPRequest(getOTPValue, serviceError);
                    intel.OTP.getPassword(getOTPValue, errorCB);
                }

                function getOTPValue(infoObject) {
                    //console.debug("infoObject", infoObject);
                    if (infoObject && infoObject.response && infoObject.response.authenticated) {
                        //document.forms[0].elements['[RADIUS.user]'].value = infoObject.CredentialId;
                        document.forms[0].elements['[RADIUS.password]'].value = infoObject.response.otp;
                    }
                    if (otpStatus == 3) { //otp query began after user submitted the form, so submit now that we have the value
                        otpStatus = 2;
                        document.forms[0].submit();
                    } else {
                        otpStatus = 2;
                    }
                    
                }

                function checkOTPRetrieval() {
                    //  console.debug("checkOTPRetrieval",retrievedOTP );
                    if (retrievedOTP) {
                        document.forms[0].submit();
                    } else if (otpTries < 15) {
                        otpTries++;
                        setTimeout("checkOTPRetrieval()", 500);
                    } else {
                        document.getElementById("LoginButton").value = "Log In";
                        alert("We were unable to detect your fingerprint scan, which is required for you to log in.  Please contact support."); //FIXME - localize
                    }
                }

                function checkOTP() {
                    console.debug("checkOTP");
                    if (otpStatus == 0) {
                        queryOTP();
                    }
                }
                 
                
        </script>

        

        
            <form id="loginForm" name="loginForm" method="post" action="/WebNetworkAuth.jsp">
                
                <input type="hidden" name="[Client.Hardware]" value=""/>
                <table class="loginForm-main-table" >
                    
                    
                        
                            

                            

                            
                                
                                    
                                
                                
                                

                                <tr>
                                    <td class="loginForm-label-cell">
                                        <div class="loginForm-label-text">Sycamore Login<span class="loginForm-colon">:</span></div>
                                                                                                                           
                                        <input class="loginForm-text-input"  type='text' name='cn' onfocus="try{if (focusStyle)focusStyle(this)}catch(err){}" onblur="try{if (blurStyle)blurStyle(this)}catch(err){}" onkeyup="return checkEnterOnSubmit(event)" autocomplete="on">
                                    </td>
                                </tr>

                            
                        
                    
                        
                            

                            

                            
                                
                                
                                    
                                
                                

                                <tr>
                                    <td class="loginForm-label-cell">
                                        <div class="loginForm-label-text">Password<span class="loginForm-colon">:</span></div>
                                                                                                                           
                                        <input class="loginForm-text-input"  type='password' name='[password]' onfocus="try{if (focusStyle)focusStyle(this)}catch(err){}" onblur="try{if (blurStyle)blurStyle(this)}catch(err){}" onkeyup="return checkEnterOnSubmit(event)" autocomplete="on">
                                    </td>
                                </tr>

                            
                        
                    
                    
                    
                    <tr>
                        <td align="right" colspan="2">
                                                        
                            <input id="LoginButton" class="WebOSButton" type="button" onclick="setLoading()" alt="Login Button" value="Log In" name="I1" onmouseover="try{if (toggleHover)toggleHover(this)}catch(err){}" onmouseout="try{if (toggleHover)toggleHover(this)}catch(err){}" />
                            
                        </td>
                    </tr>
                </table>
            </form>
        
        

                    </div>
                </div> 
        
        </td>
    </tr>
    <tr>
        <td class="loginFooter" >
           
        <img src="/swDashboard/images/icons/stock/iToolbar 2/16x16/exclamation.png" title="isu-swrlay-005-Relay" style="float:left">
        
        <span class="loginCopyRightText">
            <script type="text/javascript">
                document.writeln( "&copy; Stoneware, Inc. 1999-" + new Date().getFullYear() );
            </script>
        </span>
        </td>
    </tr>
</table>            
    </body>
</html>
